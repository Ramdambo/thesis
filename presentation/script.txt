Hello everybody, thanks for joining us today.
My name is Daniel Gusenburger and I have the pleasure to present to you the topic of my bachelor's
thesis with the title 'Exploring Circular Corner Regions as Seed Points for PDE-based inpainting'.

Let's start without further ado.

<switch to intro slide>

Ok so first I'll provide some context for the title as there may be some listeners that are not
familiar with PDE-based inpainting. For those of you, let me give a brief overview of where to put 
this topic.

Inpainting itself is nothing new, the technique has existed since many decades but primarily in the
area of image restoration in museums and similar. In 2000, a first method for digital inpainting was proposed 
by Marcelo Bertalmio et al. In 2005 however, it was suggested that specifically inpainting methods based on solving
partial differential equations may be of use particularly in the field of image compression. But
why is that ? Put simply, it was shown that these processes can be used to reconstruct images from
sparse pixel masks that can be compressed easily. The challenge for this method of image
compression is the selection of pixels that are kept in the mask. And this is exactly where we will
hop in now. 

<switch to problem slide>

There are different approaches of choosing the seed points for an inpainting mask. These can be
divided in either semantic or tree based approaches. While tree-based approaches have been explored
more in the recent years and have also been shown to work really really well in the context of
image compression (surpassed JPEG200), semantic approaches like using edges or corners of the image as
interpolation points were somewhat left out. Especially inpainting using corners as seeds has
barely been covered. 

<switch to related work slide>

The, to the best of my knowledge, only publication using corner information for inpainting is this
master's thesis by Henning Zimmer where he explored how well images can be compressed when one is
only using corners in the inpainting mask. Their approach was to detect corners using the
Foerstner-Harris corner detector and storing a small neighbourhood of pixels per corner. 
One problem with using corners as seed points that they addressed
is that corners are fairly rare compared to other features, i.e. the maximum distance between seed points
is significantly larger than in tree-based approaches. Therefore they implemented a more
sophisticated inpainting method that was capable of filling in larger regions. However, they were
not able to surpass the quality of JPEG or other tree/edge-based approaches.
They suggested to improve the method by tweaking the parameter selection in the corner detection
process and adjust the shape of corner regions by e.g. using larger corner regions. Here we can see
some of the results by Zimmer. Especially for larger corner regions, the inpainted image does not
look promising.

<switch to approach slide>

This is where I want to take it up. The plan is to substitute the small 4-neighbourhoods by larger
regions shaped like a circle. I want to follow up on the approach by trying some of the
improvements that they suggested. For example, in the corner detection process, instead of using 
a constant threshold to distinguish between corners and non-corners, I wanted to implement a
percentile criterion to make the thresholding somewhat more robust and invariant w.r.t the input
image in a sense that when using the same parameters for different images, roughly the same amount
of corners is detected. 

<switch to slide with percentile>

Ok so now I will briefly explain what the modifications to this approach would look like. First, I
want to talk about percentile thresholding. Normally, at least for the classical corner detection
algorithms like Rohr and Harris, the measure is thresholded to filter out pixels that are not
corners. The problem with a predetermined threshold is, that it often depends on the input image
and is thus not well suited to control the amount of corners. A better candidate is the so called
percentile thresholding where you specify how many percent of total corners you want to
keep/discard. Another variant that I want to experiment with calculates how many corner regions of
a certain radius can be kept in the inpainting mask such that the mask only contains so and so
percent of pixels. This could be very promising as it would be better suited to control the size of
the inpainting mask.

<next slide>

Another adaption I want to experiment with is to introduce a modified non-maximum suppression. 
In short, non-maximum suppression is used in corner detection algorithms to ensure that the
detected corners are local maxima of the cornerness measure, i.e. a function that tells us how
likely the current pixel is to be a corner. Usually, one only checks if the current pixel is larger
than its neighbours. And usually this is enough. But what I noticed in preliminary experiment 
when using large corner regions is, that the corner regions tend to overlap by a large margin in
textured regions. My idea for a remedy is to modify the non-maximum suppression in such a way that
a pixel is only considered as a seed point if it is the local maximum in a circle of the same size
as the corner regions. 

<switch to next slide with figure>

An example from my experiments can be seen here. As we see, in regions with many corners, we can
limit the amount of regions. The idea here is that if we have a corner that is already contained
in the circle around a `more important` corner, we do not have to draw a circle around this corner
since it is already covered by another corner. This leads to a more well distributed mask which
tackles the problem of sparsity of corners.

<switch to slide with limitations>

So what can be expected of this approach or better, where are the limits of this approach. Clearly
one of the biggest problems with this approach is that we can not generate additional corners.
That means that in an image with very few corners this method might not perform well since the
distance between those corners might be too large or there is not anough information in other areas
leading to a faulty inpainting result.

Another limitation are highly textured images. The issue here lies in the size of the corner
regions. If we try to cover the texture extensively, this leads to a very dense mask and kind of
defeats the purpose of compression by inpainting if the mask basically consists of the whole image.
Tree-based methods might be better suited for these kind of images.
However, I expect this approach to do fairly well in binary or cartoony images, i.e. images
consisting of only two colours or images with larger constant areas without much texture. 

The only limitation here is, as mentioned already, the distance between corners. 

<next slide>

I plan to evaluate the masks by measuring the quality of the image resulting from the inpainting
process compared to the original image using the common error measures MSE and PSNR. During
research, I also stumbled upon the SSIM measure which is supposed to measure the structural
similarity of two images. It is supposed to better represent how the human visual system compares
images.
