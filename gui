#!/usr/bin/python
import json
import shutil
import tkinter as tk
from os import listdir, remove
from os.path import abspath, dirname, exists, join
from time import time
from tkinter import filedialog, messagebox, ttk

from scripts.run import corners, inpaint, name_from_path

# Directories
here = dirname(__file__)
DETECTOR_TYPES = ['Rohr', 'Tomasi', 'Foerstner', 'Harris']
OUTPUT_FOLDER = abspath(join(here, 'output/'))
IMAGE_FOLDER = abspath(join(here, 'images/'))
TEMP_FOLDER = abspath(join(here, '.tmp/'))
PRESET_FOLDER = abspath(join(here, '.presets'))
DEFAULT_PRESET_FILE = abspath(join(here, '.default'))


# Name templates for caching
def temp(img_name, *params):
    filename = img_name + '-'.join([str(x) for x in params[1::2]]) + '.pgm'
    return join(TEMP_FOLDER, filename)


def temp_mask(img_name, *params):
    filename = img_name + '-'.join([str(x) for x in params[1::2]]) + 'mask.pgm'
    return join(TEMP_FOLDER, filename)


def temp_inpaint(img_name, *params):
    filename = img_name + '-'.join([str(x) for x in params[1::2]]) + 'inpaint.pgm'
    return join(TEMP_FOLDER, filename)


# Make GUI
root = tk.Tk()
root.title('Corner detection with structure tensor')
root.resizable(width=False, height=False)

inputframe = tk.Frame(root)
displayframe = tk.Frame(root)
buttonframe = tk.Frame(root)

entryframe_left = tk.LabelFrame(inputframe, text='Corner detection')
entryframe_right = tk.LabelFrame(inputframe, text='Inpainting')

# Canvas for image display
corner_canvas = tk.Canvas(displayframe, width=512, height=512)
inpaint_canvas = tk.Canvas(displayframe, width=512, height=512)

# Textbar for information display
statusmsg = tk.StringVar()
statusmsg.set('Image compression using corner detection and EED inpainting ')
statusbar = tk.Label(root, anchor=tk.E, textvariable=statusmsg)


# Global variables for image display
corner_photo = None
inpaint_photo = None

# Observable variables
image_displayed = tk.BooleanVar()
image_displayed.initialize(False)
mask_displayed = tk.BooleanVar()
mask_displayed.initialize(False)
base_img_name = tk.StringVar()
base_img_name.initialize('')

# Different parameter fields
# Limits : (start, end, step, default)
fields_corner = {'detector': {'label': 'Corner detector'},
                 'thresh': {'label': 'Percentile', 'limits': (0, 1, 0.01, 0.9)},
                 'sigma': {'label': 'Noisescale (sigma)', 'limits': (0, 10, 0.1, 0.5)},
                 'rho': {'label': 'Integration scale (rho)', 'limits': (0, 10, 0.1, 0.5)},
                 'mask': {'label': 'Size of area kept', 'limits': (0, 40, 1, 0)}, }

# Initialise parameter fields
entries_corner = {}
for field, conf in fields_corner.items():
    frame = tk.Frame(entryframe_left)
    lab = tk.Label(frame, width=22,
                   text=conf['label'] + ': ', anchor=tk.W)
    if field != 'detector':
        bot, top, step, default = conf['limits']
        ent = tk.Scale(frame, from_=bot, to=top, resolution=step,
                       length=200, orient=tk.HORIZONTAL)
        ent.set(default)
    else:
        ent = ttk.Combobox(frame, values=DETECTOR_TYPES)
        ent.current(0)
    lab.pack(side=tk.LEFT, pady=5)
    ent.pack(side=tk.LEFT, fill=tk.X, pady=5)
    frame.pack(fill=tk.X, padx=20, pady=5)
    entries_corner[field] = ent

fields_inpaint = {'sigma': {'style': 'slider', 'label': 'Noisescale (sigma)', 'limits': (0, 10, 0.1, 1)},
                  'lambda': {'style': 'slider', 'label': 'Contrast (lambda)', 'limits': (0, 1, 0.01, .8)},
                  'alpha': {'style': 'slider', 'label': 'Dissipativity (alpha)', 'limits': (0, 0.5, 0.01, 0.49)},
                  'gamma': {'style': 'slider', 'label': 'Nonnegativity (gamma)', 'limits': (0, 1, 0.01, 1)},
                  'outer': {'style': 'textbox', 'label': 'Number of outer iterations', 'default': 100},
                  'inner': {'style': 'textbox', 'label': 'Number of solver (inner) iterations', 'default': 200}}

# Initialise parameter fields
entries_inpaint = {}
for field, conf in fields_inpaint.items():
    frame = tk.Frame(entryframe_right)
    lab = tk.Label(frame, width=30,
                   text=conf['label'] + ': ', anchor='w')
    if conf['style'] == 'slider':
        bot, top, step, default = conf['limits']
        ent = tk.Scale(frame, from_=bot, to=top, resolution=step,
                       length=200, orient=tk.HORIZONTAL)
        ent.set(default)
    elif conf['style'] == 'textbox':
        ent = tk.Entry(frame)
        ent.insert(0, conf['default'])

    lab.pack(side=tk.LEFT, pady=5)
    ent.pack(side=tk.LEFT, fill='x', pady=5)
    frame.pack(fill='x', padx=10, pady=5)
    entries_inpaint[field] = ent


def read_header(img):
    with open(img, 'r', errors='replace') as f:
        lines = [l.replace('#', '').replace('\n', '') for l in f.readlines() if '#' in l]
    lines = [l.split(':') for l in lines if ':' in l]
    header = {x.strip(): y.strip() for x, y in lines}
    return header


def corners_action():
    global corner_photo
    params = get_params_corner(radius=False)
    img_name = name_from_path(base_img_name.get())
    out = temp(img_name, *params)

    if not exists(out):
        corners(base_img_name.get(), *params, outim=out)

    corner_photo = tk.PhotoImage(file=out)
    corner_canvas.create_image(256, 256, image=corner_photo)


def mask_action():
    global corner_photo
    params = get_params_corner()
    img_name = name_from_path(base_img_name.get())
    out = temp_mask(img_name, *params)

    if not exists(out):
        corners(base_img_name.get(), *params, outim=out)

    corner_photo = tk.PhotoImage(file=out)
    corner_canvas.create_image(256, 256, image=corner_photo)

    mask_displayed.set(True)


def inpaint_action():
    global inpaint_photo, corner_photo, root
    params_corner = get_params_corner()
    params_in = get_params_inpaint()
    img_name = name_from_path(base_img_name.get())
    mask_name = temp_mask(img_name, *params_corner)
    out = temp_inpaint(img_name, *[*params_corner, *params_in])

    if not exists(out):
        if not messagebox.askyesno(
            'Inpainting',
                'Start inpainting algorithm? This might take a while...'):
            return

        if not exists(mask_name):
            corners(base_img_name.get(), *params_corner, outim=mask_name)

        corner_photo = tk.PhotoImage(file=mask_name)
        corner_canvas.create_image(256, 256, image=corner_photo)
        root.update()

        print('Inpaint now')
        start = time()
        inpaint(base_img_name.get(), mask_name, *params_in, outim=out)
        runtime = time() - start

        statusmsg.set(f'Took {runtime:.2f} seconds to process the image!')

    inpaint_photo = tk.PhotoImage(file=out)
    inpaint_canvas.create_image(256, 256, image=inpaint_photo)


def get_params_corner(radius=True):
    detector = DETECTOR_TYPES.index(entries_corner['detector'].get())
    thresh = entries_corner['thresh'].get()
    sigma = entries_corner['sigma'].get()
    rho = entries_corner['rho'].get()
    size = entries_corner['mask'].get()

    params = ['-c', detector, '-q', thresh, '-s', sigma, '-r', rho]
    if radius:
        params.extend(['-m', size])

    return list(map(str, params))


def get_params_inpaint():
    lbda = entries_inpaint['lambda'].get()
    sigma = entries_inpaint['sigma'].get()
    alpha = entries_inpaint['alpha'].get()
    gamma = entries_inpaint['gamma'].get()
    outer = entries_inpaint['outer'].get()
    inner = entries_inpaint['inner'].get()

    return list(map(str, ['-l', lbda, '-s', sigma, '-a', alpha, '-g', gamma, '-n', outer, '-N', inner]))


def file_dialog():
    global corner_photo
    nimg = filedialog.askopenfilename(
        initialdir=IMAGE_FOLDER, title='Select file', filetypes=(
            ('Grey value images', '*.pgm'),))
    if len(nimg) != 0:
        base_img_name.set(nimg)
        image_displayed.set(True)

        img_name = name_from_path(base_img_name.get())
        mask_name = temp_mask(img_name, *get_params_corner())

        if not exists(mask_name):
            mask_displayed.set(False)

        corner_photo = tk.PhotoImage(file=base_img_name.get())
        corner_canvas.create_image(256, 256, image=corner_photo)


def save_preset():
    filename = filedialog.asksaveasfilename(
        initialdir=PRESET_FOLDER,
        title='Save preset as...',
        defaultextension='.json',
        initialfile='preset1.json')
    vals = {'corner': {x: y.get() for x, y in entries_corner.items()}, 'inpaint': {
        x: y.get() for x, y in entries_inpaint.items()}}
    if len(filename) != 0:
        json.dump(vals, open(filename, 'w+'))


def set_preset_values(vals):
    for k, v in vals['corner'].items():
        entries_corner[k].set(v)
    for k, v in vals['inpaint'].items():
        if k in ['outer', 'inner']:
            entries_inpaint[k].delete(0, tk.END)
            entries_inpaint[k].insert(tk.END, v)
        else:
            entries_inpaint[k].set(v)


def load_preset():
    filename = filedialog.askopenfilename(
        initialdir=PRESET_FOLDER,
        title='Select preset',
        filetypes=(('JSON files', '*.json'),))
    if len(filename) != 0:
        vals = json.load(open(filename, 'r+'))
        set_preset_values(vals)


def set_default_preset():
    filename = filedialog.askopenfilename(
        initialdir=PRESET_FOLDER,
        title='Select default preset',
        filetypes=(('JSON files', '*.json'),))
    with open(DEFAULT_PRESET_FILE, 'w+') as f:
        f.write(filename)


def clear_presets():
    cache = listdir(PRESET_FOLDER)
    num_cache = len(cache)
    if messagebox.askyesno('Clear presets?', f'Do you want to remove all {num_cache} presets ?'):
        for file in cache:
            remove(join(PRESET_FOLDER, file))
        messagebox.showinfo('Info', 'Presets deleted!')


def reset_to_default():
    # for k, v in fields_corner.items():
    #     if k == 'detector':
    #         entries_corner[k].set(DETECTOR_TYPES[0])
    #     else:
    #         entries_corner[k].set(v['limits'][-1])
    # for k, v in fields_inpaint.items():
    #     if v['style'] == 'textbox':
    #         entries_inpaint[k].delete(0, tk.END)
    #         entries_inpaint[k].insert(tk.END, v['default'])
    #     else:
    #         entries_inpaint[k].set(v['limits'][-1])
    pass


def clear_cache():
    cache = listdir(TEMP_FOLDER)
    num_cache = len(cache)
    if messagebox.askyesno('Clear cache?', f'Do you want to remove all {num_cache} files in the cache ?'):
        for file in cache:
            remove(join(TEMP_FOLDER, file))
        messagebox.showinfo('Info', 'Cache cleared!')


def save_image():
    img_name = name_from_path(base_img_name.get())
    savemask = messagebox.askyesnocancel(
        'Save mask', 'Do you want to save the mask image ?')

    if savemask:
        filename = filedialog.asksaveasfilename(
            initialdir=OUTPUT_FOLDER,
            title='Save mask as...',
            filetypes=(
                ('Grey Value Images',
                 '.pgm'),
            ),
            defaultextension='.pgm',
            initialfile=f'{img_name}-mask.pgm')

        imgpath = temp_mask(img_name, *get_params_corner())

        if not exists(imgpath):
            messagebox.showerror(
                'Error!', f'Image {imgpath} does not exist! Please run the algorithm first!')

        shutil.copy(imgpath, filename)

        messagebox.showinfo(
            'Image copied!', f'Copied image {imgpath} to location {filename}')

    saveinpaint = messagebox.askyesnocancel(
        'Save inpainted', 'Do you want to save the inpainted image ?')

    if saveinpaint:
        filename = filedialog.asksaveasfilename(
            initialdir=OUTPUT_FOLDER,
            title='Save inpainting image as...',
            filetypes=(
                ('Grey Value Images',
                 '.pgm'),
            ),
            defaultextension='.pgm',
            initialfile=f'{img_name}-inpaint.pgm')

        imgpath = temp_inpaint(
            img_name, *[*get_params_corner(), *get_params_inpaint()])

        if not exists(imgpath):
            messagebox.showerror(
                'Error!', f'Image {imgpath} does not exist! Please run the algorithm first!')

        shutil.copy(imgpath, filename)

        messagebox.showinfo(
            'Image saved!', f'Saved image {imgpath} to location {filename}')


def display_original():
    global corner_photo
    corner_photo = tk.PhotoImage(file=base_img_name.get())
    corner_canvas.create_image(256, 256, image=corner_photo)


default_preset_file = open(DEFAULT_PRESET_FILE, 'r+').read().strip()
if len(default_preset_file) > 0:
    set_preset_values(json.load(open(default_preset_file, 'r+')))


original_button = tk.Button(
    buttonframe,
    text='Display original',
    command=display_original,
    state=tk.DISABLED)
corner_button = tk.Button(buttonframe, text='Show corners',
                          command=corners_action, state=tk.DISABLED)
mask_button = tk.Button(buttonframe, text='Compute mask',
                        command=mask_action, state=tk.DISABLED)
inpaint_button = tk.Button(
    buttonframe, text='Inpaint from mask', command=inpaint_action, state=tk.DISABLED)
quit_button = tk.Button(buttonframe, text='Quit', command=root.quit)


menubar = tk.Menu(root)

filemenu = tk.Menu(menubar, tearoff=0)
filemenu.add_command(label='Open image       Strg+o', command=file_dialog)
filemenu.add_command(label='Clear cache', command=clear_cache)
filemenu.add_command(label='Save image...',
                     command=save_image, state=tk.DISABLED)
filemenu.add_separator()
filemenu.add_command(label='Quit             Strg+d', command=root.quit)

presetmenu = tk.Menu(menubar, tearoff=0)
presetmenu.add_command(label='Save preset', command=save_preset)
presetmenu.add_command(label='Load preset', command=load_preset)
presetmenu.add_command(label='Set default preset', command=set_default_preset)
presetmenu.add_command(label='Unset default preset',
                       command=lambda *args: open(DEFAULT_PRESET_FILE, 'w+'))
presetmenu.add_command(label='Clear presets', command=clear_presets)


menubar.add_cascade(label='File', menu=filemenu)
menubar.add_cascade(label='Presets', menu=presetmenu)
root.config(menu=menubar)
root.bind('<Control-q>', func=lambda *args: root.quit())
root.bind('<Control-o>', func=lambda *args: file_dialog())
root.bind('<Control-c>', func=lambda *args: clear_cache())
root.bind('<Control-d>', func=lambda *args: corners())
root.bind('<Control-m>', func=lambda *args: mask())
root.bind('<Control-i>', func=lambda *args: inpaint())


def button_state(*args):
    state = 'normal' if image_displayed.get() else 'disabled'
    corner_button .config(state=state)
    original_button.config(state=state)
    mask_button.config(state=state)
    inpaint_button.config(state=state)


def inpaint_button_state(*args):
    state = 'normal' if mask_displayed.get() else 'disabled'
    filemenu.entryconfig(2, state=state)


image_displayed.trace('w', button_state)
mask_displayed.trace('w', inpaint_button_state)

entryframe_left.pack(fill=tk.BOTH, expand=1, padx=10, pady=5)
entryframe_right.pack(fill=tk.BOTH, expand=1, padx=10, pady=5)
inputframe.pack(side=tk.LEFT, padx=10, pady=10)

corner_canvas.pack(side=tk.LEFT, padx=10, pady=10)
inpaint_canvas.pack(side=tk.LEFT, padx=10, pady=10)
displayframe.pack(padx=10, pady=10)

original_button.pack(side=tk.LEFT, padx=10)
corner_button.pack(side=tk.LEFT, padx=10)
mask_button.pack(side=tk.LEFT, padx=10)
inpaint_button.pack(side=tk.RIGHT, padx=10)
buttonframe.pack(padx=10, pady=10)

statusbar.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=10)


root.mainloop()
